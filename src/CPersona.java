
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Usuario
 */
public class CPersona extends javax.swing.JFrame {
    conectar cc = new conectar();
    Connection cn = cc.getConnection();
    public static String idP;
    /**
     * Creates new form CPersona
     */
    public CPersona() {
        initComponents();
        mostrardatos("");
        this.setLocationRelativeTo(null);
        cerrar();
    }
    public void cerrar(){
        try{
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e){
                    confirmarSalida();
                }
            });
            this.setVisible(true);
        } catch (Exception e){
            e.printStackTrace();
        }
    }
    public void confirmarSalida(){
        int valor1 = JOptionPane.showConfirmDialog(this,"Â¿Esta seguro de salir de la Aplicacion?","Advertencia",JOptionPane.YES_NO_OPTION);
        if(valor1 == JOptionPane.YES_OPTION){
            JOptionPane.showMessageDialog(null,"GRacias por su visita!","Gracias", JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);
        }
    }
    void mostrardatos(String valor){
        DefaultTableModel modelo= new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Tipo");
           
        tbPersona.setModel(modelo);
        String sql="";
        if (valor.equals("")){
            //sql = "SELECT p.codigo_p, p.empleado, p.proveedor, e.primer_nombre, pr.nombre FROM Pagos p, Empleado e,Proveedor pr WHERE e.id = p.empleado OR pr.id = p.proveedor GROUP BY p.codigo_p";
            sql ="SELECT * FROM(SELECT DISTINCT p.id, UPPER(CONCAT(c.nombreCliente)) as Nombre, 'Cliente' AS Tipo"+
            " FROM Persona p INNER JOIN Cliente c ON c.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(pr.nombre,\" \",pr.apellido)) as Nombre, 'Proveedor' AS Tipo"+
            " FROM Persona p INNER JOIN Proveedor pr ON pr.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(e.primer_nombre,\" \",e.primer_apeelido)) as Nombre, 'Empleado' AS Tipo"+
            " FROM Persona p INNER JOIN Empleado e ON e.id = p.id) as pp";
        } else {
            sql = "SELECT * FROM(SELECT DISTINCT p.id, UPPER(CONCAT(c.nombreCliente)) as Nombre, 'Cliente' AS Tipo"+
            " FROM Persona p INNER JOIN Cliente c ON c.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(pr.nombre,\" \",pr.apellido)) as Nombre, 'Proveedor' AS Tipo"+
            " FROM Persona p INNER JOIN Proveedor pr ON pr.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(e.primer_nombre,\" \",e.primer_apeelido)) as Nombre, 'Empleado' AS Tipo"+
            " FROM Persona p INNER JOIN Empleado e ON e.id = p.id) as pp HAVING pp.Nombre like '%"+valor+"%'";
        }
    
        String [] datos = new String[3];
        try{
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                
                modelo.addRow(datos);
            }
            tbPersona.setModel(modelo);
        } catch (SQLException ex){
           Logger.getLogger(CPersona.class.getName()).log(Level.SEVERE, null, ex); 

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPersona = new javax.swing.JTable();
        lbt = new javax.swing.JLabel();
        txtbuscar = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jbuscar = new javax.swing.JButton();
        jMostrar = new javax.swing.JButton();
        btnEmp = new javax.swing.JButton();
        btnProv = new javax.swing.JButton();
        btnProv1 = new javax.swing.JButton();
        tCE = new javax.swing.JLabel();
        jmenu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jNuevo = new javax.swing.JMenuItem();
        jPrincipla = new javax.swing.JMenuItem();

        jMenuItem2.setText("Eliminar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setComponentPopupMenu(jPopupMenu1);

        tbPersona.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbPersona.setComponentPopupMenu(jPopupMenu1);
        jScrollPane1.setViewportView(tbPersona);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 230, 650, 170));

        lbt.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lbt.setForeground(new java.awt.Color(0, 0, 0));
        lbt.setText("CONSULTAS DE PERSONAS REGISTRADAS");
        getContentPane().add(lbt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 520, 50));

        txtbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbuscarActionPerformed(evt);
            }
        });
        getContentPane().add(txtbuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 170, 100, -1));

        jButton1.setText("Persona");
        jButton1.setMaximumSize(new java.awt.Dimension(106, 32));
        jButton1.setMinimumSize(new java.awt.Dimension(106, 32));
        jButton1.setPreferredSize(new java.awt.Dimension(106, 32));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 430, -1, 40));

        jbuscar.setText("Buscar");
        jbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbuscarActionPerformed(evt);
            }
        });
        getContentPane().add(jbuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, 80, 40));

        jMostrar.setText("Mostar Datos");
        jMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMostrarActionPerformed(evt);
            }
        });
        getContentPane().add(jMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, 38));

        btnEmp.setText("Empleado");
        btnEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpActionPerformed(evt);
            }
        });
        getContentPane().add(btnEmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, -1, 36));

        btnProv.setText("Cliente");
        btnProv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProvActionPerformed(evt);
            }
        });
        getContentPane().add(btnProv, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 160, 90, 36));

        btnProv1.setText("Proveedor");
        btnProv1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProv1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnProv1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 160, 90, 36));

        tCE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/au2.jpg"))); // NOI18N
        getContentPane().add(tCE, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 490));

        jMenu1.setText("Archivo");

        jNuevo.setText("Nuevo Ingreso");
        jNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(jNuevo);

        jPrincipla.setText("Menu");
        jPrincipla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrinciplaActionPerformed(evt);
            }
        });
        jMenu1.add(jPrincipla);

        jmenu.add(jMenu1);

        setJMenuBar(jmenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNuevoActionPerformed
        // TODO add your handling code here:
        RViaje rv = new RViaje();
        rv.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jNuevoActionPerformed

    private void jPrinciplaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrinciplaActionPerformed
        // TODO add your handling code here:
        Inicio in = new Inicio();
        in.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jPrinciplaActionPerformed

    private void txtbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbuscarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        persona p = new persona();
        p.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbuscarActionPerformed
        // TODO add your handling code here:
        mostrardatos(txtbuscar.getText());
    }//GEN-LAST:event_jbuscarActionPerformed

    private void jMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMostrarActionPerformed
        // TODO add your handling code here:
        mostrardatos("");
        this.txtbuscar.setText("");
    }//GEN-LAST:event_jMostrarActionPerformed

    private void btnProvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProvActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo= new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Tipo");

        tbPersona.setModel(modelo);
        String sql="SELECT * FROM(SELECT DISTINCT p.id, UPPER(CONCAT(c.nombreCliente)) as Nombre, 'Cliente' AS Tipo"+
            " FROM Persona p INNER JOIN Cliente c ON c.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(pr.nombre,\" \",pr.apellido)) as Nombre, 'Proveedor' AS Tipo"+
            " FROM Persona p INNER JOIN Proveedor pr ON pr.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(e.primer_nombre,\" \",e.primer_apeelido)) as Nombre, 'Empleado' AS Tipo"+
            " FROM Persona p INNER JOIN Empleado e ON e.id = p.id) as pp"+
            " WHERE pp.Tipo = 'Cliente'";
            
        String [] datos = new String[3];
        try{
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                
                modelo.addRow(datos);
            }
            tbPersona.setModel(modelo);
        } catch (SQLException ex){
            Logger.getLogger(REmpleado.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_btnProvActionPerformed

    private void btnEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo= new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Tipo");

        tbPersona.setModel(modelo);
        String sql="SELECT * FROM(SELECT DISTINCT p.id, UPPER(CONCAT(c.nombreCliente)) as Nombre, 'Cliente' AS Tipo"+
            " FROM Persona p INNER JOIN Cliente c ON c.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(pr.nombre,\" \",pr.apellido)) as Nombre, 'Proveedor' AS Tipo"+
            " FROM Persona p INNER JOIN Proveedor pr ON pr.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(e.primer_nombre,\" \",e.primer_apeelido)) as Nombre, 'Empleado' AS Tipo"+
            " FROM Persona p INNER JOIN Empleado e ON e.id = p.id) as pp"+
            " WHERE pp.Tipo = 'Empleado'";
        String [] datos = new String[3];
        try{
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                
                modelo.addRow(datos);
            }
            tbPersona.setModel(modelo);
        } catch (SQLException ex){
            Logger.getLogger(REmpleado.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_btnEmpActionPerformed

    private void btnProv1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProv1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo= new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Tipo");

        tbPersona.setModel(modelo);
        String sql="SELECT * FROM(SELECT DISTINCT p.id, UPPER(CONCAT(c.nombreCliente)) as Nombre, 'Cliente' AS Tipo"+
            " FROM Persona p INNER JOIN Cliente c ON c.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(pr.nombre,\" \",pr.apellido)) as Nombre, 'Proveedor' AS Tipo"+
            " FROM Persona p INNER JOIN Proveedor pr ON pr.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(e.primer_nombre,\" \",e.primer_apeelido)) as Nombre, 'Empleado' AS Tipo"+
            " FROM Persona p INNER JOIN Empleado e ON e.id = p.id) as pp"+
            " WHERE pp.Tipo = 'Proveedor'";
        String [] datos = new String[3];
        try{
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                
                modelo.addRow(datos);
            }
            tbPersona.setModel(modelo);
        } catch (SQLException ex){
            Logger.getLogger(REmpleado.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_btnProv1ActionPerformed
    private String obtenerCod(){
        int fila=tbPersona.getSelectedRow();
        String tipo = tbPersona.getValueAt(fila,2).toString();
        //String nombre= cbId.getSelectedItem().toString();
        String id=null;
        if(tipo.equals("Cliente")){
            String sql = "SELECT pp.id FROM(SELECT DISTINCT p.id, UPPER(CONCAT(c.nombreCliente)) as Nombre, 'Cliente' AS Tipo"+
            " FROM Persona p INNER JOIN Cliente c ON c.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(pr.nombre,\" \",pr.apellido)) as Nombre, 'Proveedor' AS Tipo"+
            " FROM Persona p INNER JOIN Proveedor pr ON pr.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(e.primer_nombre,\" \",e.primer_apeelido)) as Nombre, 'Empleado' AS Tipo"+
            " FROM Persona p INNER JOIN Empleado e ON e.id = p.id) as pp  WHERE pp.Tipo like '%"+tipo+"%'";
        try {
            
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                id=rs.getString(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(RPago.class.getName()).log(Level.SEVERE, null, ex);
        }
            return id;  
 
        }else if(tipo.equals("Proveedor")) {
//
            String sql = "SELECT pp.id FROM(SELECT DISTINCT p.id, UPPER(CONCAT(c.nombreCliente)) as Nombre, 'Cliente' AS Tipo"+
            " FROM Persona p INNER JOIN Cliente c ON c.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(pr.nombre,\" \",pr.apellido)) as Nombre, 'Proveedor' AS Tipo"+
            " FROM Persona p INNER JOIN Proveedor pr ON pr.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(e.primer_nombre,\" \",e.primer_apeelido)) as Nombre, 'Empleado' AS Tipo"+
            " FROM Persona p INNER JOIN Empleado e ON e.id = p.id) as pp  WHERE pp.Tipo like '%"+tipo+"%'";
        try {
            
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                id=rs.getString(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(RPago.class.getName()).log(Level.SEVERE, null, ex);
        }
            return id;  
        }else if(tipo.equals("Empleado")) {
//
            String sql = "SELECT pp.id FROM(SELECT DISTINCT p.id, UPPER(CONCAT(c.nombreCliente)) as Nombre, 'Cliente' AS Tipo"+
            " FROM Persona p INNER JOIN Cliente c ON c.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(pr.nombre,\" \",pr.apellido)) as Nombre, 'Proveedor' AS Tipo"+
            " FROM Persona p INNER JOIN Proveedor pr ON pr.id = p.id"+
            " UNION SELECT DISTINCT p.id, UPPER(CONCAT(e.primer_nombre,\" \",e.primer_apeelido)) as Nombre, 'Empleado' AS Tipo"+
            " FROM Persona p INNER JOIN Empleado e ON e.id = p.id) as pp  WHERE pp.Tipo like '%"+tipo+"%'";
        try {
            
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                id=rs.getString(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(RPago.class.getName()).log(Level.SEVERE, null, ex);
        }
            return id;  
        
        }
      
        return id;
    }
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        int fila=tbPersona.getSelectedRow();
        String tipo = tbPersona.getValueAt(fila,2).toString();
        idP = obtenerCod();
        //int cod1 = Integer.parseInt(cod);
        if(tipo.equals("Cliente")){
            try{
            PreparedStatement pst=cn.prepareStatement("DELETE FROM Persona WHERE id='"+idP+"'");
            pst.executeUpdate();
            mostrardatos("");// TODO add your handling code here:
            } catch (Exception e){
            }
 
        }else if(tipo.equals("Proveedor")) {
//
           try{
            PreparedStatement pst=cn.prepareStatement("DELETE FROM FROM Persona WHERE id='"+idP+"'");
            pst.executeUpdate();
            mostrardatos("");// TODO add your handling code here:
            } catch (Exception e){
            } 
        }else if(tipo.equals("Empleado")) {
//
           try{
            PreparedStatement pst=cn.prepareStatement("DELETE FROM FROM Persona WHERE id='"+idP+"'");
            pst.executeUpdate();
            mostrardatos("");// TODO add your handling code here:
            } catch (Exception e){
            } 
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CPersona().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEmp;
    private javax.swing.JButton btnProv;
    private javax.swing.JButton btnProv1;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JButton jMostrar;
    private javax.swing.JMenuItem jNuevo;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JMenuItem jPrincipla;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbuscar;
    private javax.swing.JMenuBar jmenu;
    private javax.swing.JLabel lbt;
    private javax.swing.JLabel tCE;
    private javax.swing.JTable tbPersona;
    private javax.swing.JTextField txtbuscar;
    // End of variables declaration//GEN-END:variables
}
